{"version":3,"file":"api-service-2-Do44Dpm1.js","sources":["../../src/js/api-service-2.js"],"sourcesContent":["// TMDB API Key\nconst API_KEY = '8a4d9ed67b7d6af3412d8460b7ed63ee';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst moviesGrid = document.getElementById('movies');\nconst searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('search-input');\nconst searchButton = document.getElementById('search-btn');\nconst yearDropdown = document.getElementById('membership'); // Year dropdown\n\nlet genreCache = null; // Genre listesini önbelleğe almak için değişken\n\n// Yıl seçimi için dropdown'u dinleyin\n// Yıl seçildiğinde filmi filtrelemek için bir fonksiyon\nasync function filterMoviesByYear(query = '', year = '') {\n  if (query === '' && year === '') {\n    // Eğer hem query hem de year boşsa popüler filmleri yükle\n    await fetchMovies(\n      `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } else if (year !== '' && query === '') {\n    // Yalnızca yıl seçildiyse, sadece yıl bazlı filtreleme yapılır\n    await fetchMoviesByYear(year);\n  } else {\n    // Yıl ve arama terimi ile birlikte filtreleme yapılır\n    await searchMovies(query, year);\n  }\n}\n\n// Yıla göre filmleri çekmek için fonksiyon\nasync function fetchMoviesByYear(year) {\n  try {\n    const url = `${BASE_URL}/discover/movie?api_key=${API_KEY}&language=en-US&primary_release_year=${year}&sort_by=popularity.desc&page=1`;\n    const response = await fetch(url);\n    const data = await response.json();\n    displayMovies(data.results); // Film sonuçlarını göster\n  } catch (error) {\n    console.error('Error fetching movies by year:', error);\n  }\n}\n\n// Film arama fonksiyonu\nasync function searchMovies(query, year = '') {\n  try {\n    let url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}`;\n\n    if (year) {\n      // Eğer yıl parametresi varsa, onu da URL'ye ekle\n      url += `&primary_release_year=${year}`;\n    }\n\n    const response = await fetch(url);\n    const data = await response.json();\n    displayMovies(data.results); // Film sonuçlarını göster\n  } catch (error) {\n    console.error('Error searching movies:', error);\n  }\n}\n\n// Arama butonuna tıklama olayını dinle\nif (searchButton) {\n  searchButton.addEventListener('click', async event => {\n    event.preventDefault(); // Sayfanın yeniden yüklenmesini engeller\n    const query = searchInput.value.trim();\n    const selectedYear = yearDropdown.value.trim();\n    // Yıl ve isme göre filtreleme, sadece butona basıldığında yapılır\n    await filterMoviesByYear(query, selectedYear);\n  });\n}\n\n// Enter tuşu ile arama yapmak için input kutusunu dinle\nif (searchInput) {\n  searchInput.addEventListener('keydown', event => {\n    if (event.key === 'Enter') {\n      event.preventDefault(); // Enter tuşuna basıldığında sayfa yenilenmesin\n      const query = searchInput.value.trim();\n      const selectedYear = yearDropdown.value.trim();\n      // Yıl ve isme göre filtreleme, sadece Enter tuşuna basıldığında yapılır\n      filterMoviesByYear(query, selectedYear);\n    }\n  });\n}\n\n// Rastgele bir film çekmek için fonksiyon\nasync function fetchRandomMovie() {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc`\n    );\n    const data = await response.json();\n\n    // Filmler arasından rastgele birini seç\n    const randomIndex = Math.floor(Math.random() * data.results.length);\n    const randomMovie = data.results[randomIndex];\n\n    // Hero alanını güncelle\n    updateHeroSection(randomMovie);\n  } catch (error) {\n    console.error('Film verisi alınırken bir hata oluştu:', error);\n  }\n}\n\n// Yıldızları oluşturmak için fonksiyon\nfunction createStarRating(voteAverage) {\n  const starContainer = document.createElement('div');\n  starContainer.classList.add('star-rating');\n\n  const rating = voteAverage / 2;\n  const fullStars = Math.floor(rating);\n  const halfStar = rating % 1 >= 0.5 ? 1 : 0;\n  const emptyStars = 5 - fullStars - halfStar;\n\n  for (let i = 0; i < fullStars; i++) {\n    const star = document.createElement('span');\n    star.classList.add('star', 'full');\n    star.innerHTML = '★';\n    starContainer.appendChild(star);\n  }\n\n  if (halfStar) {\n    const star = document.createElement('span');\n    star.classList.add('star', 'half');\n    star.innerHTML = '☆';\n    starContainer.appendChild(star);\n  }\n\n  for (let i = 0; i < emptyStars; i++) {\n    const star = document.createElement('span');\n    star.classList.add('star', 'empty');\n    star.innerHTML = '☆';\n    starContainer.appendChild(star);\n  }\n\n  return starContainer;\n}\n\n// Hero alanını güncellemek için fonksiyon\nfunction updateHeroSection(movie) {\n  const heroTitle = document.querySelector('.hero-title');\n  heroTitle.textContent = movie.title;\n\n  const heroBackground = document.querySelector('.hero');\n  heroBackground.style.backgroundImage = `url(https://image.tmdb.org/t/p/original/${\n    movie.backdrop_path || ''\n  })`;\n\n  const heroDescription = document.querySelector('.hero-description');\n  heroDescription.textContent =\n    movie.overview || 'Bu film için açıklama mevcut değil.';\n\n  const moreDetailsButton = document.querySelector('.more-details-btn');\n  moreDetailsButton.href = `https://www.themoviedb.org/movie/${movie.id}`;\n\n  const heroRating = document.querySelector('.hero-rating');\n  heroRating.innerHTML = '';\n  heroRating.appendChild(createStarRating(movie.vote_average || 0));\n}\n\n// Popüler filmleri çek ve listele\nasync function fetchMovies(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    displayMovies(data.results);\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n  }\n}\n\n// Filmleri ekrana yerleştir\nasync function displayMovies(movies) {\n  moviesGrid.innerHTML = '';\n  if (movies.length === 0) {\n    moviesGrid.innerHTML = '<p>No movies found.</p>';\n  } else {\n    for (let movie of movies) {\n      const { id, title, poster_path, vote_average, release_date, genre_ids } = movie;\n\n      // Film türlerini almak için TMDB API'sinden alınan tür ID'leriyle eşleşen isimleri almak\n      const genres = genre_ids\n        ? await Promise.all(genre_ids.map((genreId) => getGenreNameById(genreId)))\n        : [];\n      const genreNames = genres.join(', ') || 'N/A';\n\n      // Film kartını oluşturma\n      const movieCard = document.createElement('div');\n      movieCard.classList.add('movie-card');\n      movieCard.setAttribute('data-id', id); // data-id ekleniyor\n\n      movieCard.innerHTML = `\n        <div class=\"movie-poster-container\">\n          <img \n            class=\"movie-poster\" \n            src=\"${\n              poster_path\n                ? IMAGE_BASE_URL + poster_path\n                : 'https://via.placeholder.com/200x300?text=No+Image'\n            }\" \n            alt=\"${title}\" \n          />\n          <div class=\"movie-overlay\">\n            <h3 class=\"movie-title\">${title}</h3>\n            <div class=\"movie-date-genres\">\n            <p class=\"movie-release-date\">${\n              release_date ? new Date(release_date).getFullYear() : 'N/A'\n            }</p>\n            <p class=\"movie-genres\">${genreNames}</p>\n          </div>\n          </div>\n        </div>\n        <div class=\"movie-info\">\n          <p class=\"movie-rating\">⭐ ${vote_average.toFixed(1)}</p>\n        </div>\n      `;\n\n      moviesGrid.appendChild(movieCard);\n    }\n  }\n}\n\n\n// Genre ID'lerini tür isimlerine dönüştürmek için fonksiyon\nasync function getGenreNameById(genreId) {\n  // Eğer genreCache doluysa, verileri önbellekten alıyoruz\n  if (!genreCache) {\n    const genreList = await fetch(\n      `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`\n    );\n    const genreData = await genreList.json();\n    genreCache = genreData.genres;\n  }\n\n  const genre = genreCache.find(g => g.id === genreId);\n  return genre ? genre.name : 'Unknown';\n}\n\n// Gece modu geçişini başlatan fonksiyon\nconst themeSwitcher = document.getElementById('theme-switcher');\nconst body = document.body;\n\nthemeSwitcher.addEventListener('click', () => {\n  body.classList.toggle('dark-mode');\n  const isDarkMode = body.classList.contains('dark-mode');\n  localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n});\n\n\n// Sayfa yüklendiğinde kullanıcı tercihlerini kontrol et\ndocument.addEventListener('DOMContentLoaded', () => {\n  const darkMode = localStorage.getItem('darkMode');\n  if (darkMode === 'enabled') {\n    document.body.classList.add('dark-mode');\n  }\n\n\n  // Rastgele bir film yükle\n  fetchRandomMovie();\n\n  // Popüler filmleri yükle\n  fetchMovies(\n    `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`\n  );\n});\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Kartlara tıklayınca ID'yi konsola yazdır\n  document.addEventListener('click', (event) => {\n    const card = event.target.closest('.movie-card');\n    if (card) {\n      console.log(card.getAttribute('data-id')); // Kartın ID'sini konsolda yazdırır\n    }\n  });\n});\n"],"names":["API_KEY","BASE_URL","IMAGE_BASE_URL","moviesGrid","searchInput","searchButton","yearDropdown","genreCache","filterMoviesByYear","query","year","fetchMovies","fetchMoviesByYear","searchMovies","url","data","displayMovies","error","event","selectedYear","fetchRandomMovie","randomIndex","randomMovie","updateHeroSection","createStarRating","voteAverage","starContainer","rating","fullStars","halfStar","emptyStars","i","star","movie","heroTitle","heroBackground","heroDescription","moreDetailsButton","heroRating","movies","id","title","poster_path","vote_average","release_date","genre_ids","genreNames","genreId","getGenreNameById","movieCard","genre","g","themeSwitcher","body","isDarkMode","card"],"mappings":"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"}